[
    {
        "title": "Inline Styles",
        "description": "Inline styles are a way to apply CSS directly to an element via the style attribute. In React, this approach involves passing a JavaScript object where the CSS properties are camelCased. Inline styles are useful for quick, one-off styles or dynamically setting styles based on component state or props. However, they can become unwieldy for complex styling and don’t support pseudo-classes or media queries natively.",
        "code": "function InlineStyleExample() {\n  return (\n    <div style={{ color: 'blue', backgroundColor: 'lightgray', padding: '10px' }}>\n      This is styled using inline styles!\n    </div>\n  );\n}"
    },
    {
        "title": "CSS Modules",
        "description": "CSS Modules allow you to write standard CSS, but scope the styles locally to the component by default. This prevents styles from one component from affecting others, solving the global namespace problem inherent in traditional CSS. CSS Modules are particularly useful in large applications where component-level modularity and maintainability are priorities. The styles are applied using unique class names generated by the module system, ensuring no conflicts across components.",
        "code": "import styles from './Button.module.css';\n\nfunction CSSModulesExample() {\n  return <button className={styles.button}>Styled with CSS Modules</button>;\n}",
        "code2": ".button {\n  background-color: green;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n}"
    },
    {
        "title": "Styled Components",
        "description": "Styled Components is a popular library for styling React components using tagged template literals in JavaScript. It allows you to define styled components with encapsulated styles that can adapt based on props or component state. This method promotes component reusability and encapsulation, making it easy to manage and scale styles across large applications. Styled Components also support theming, nesting, and injecting global styles, offering a flexible and modern approach to styling React apps.",
        "code": "import styled from 'styled-components';\n\nconst Button = styled.button`\n  background-color: purple;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n`;\n\nfunction StyledComponentsExample() {\n  return <Button>Styled with Styled Components</Button>;\n}"
    },
    {
        "title": "Global CSS",
        "description": "Global CSS refers to traditional stylesheets that are applied across your entire React application. This method is ideal for applying reset styles, base typography, or any styles that should be consistent across multiple components. However, because styles are applied globally, it’s easy to run into issues with specificity and unintended overrides. It’s best used in conjunction with other methods like CSS Modules or Styled Components to handle more specific or component-scoped styles.",
        "code": "import './global.css';\n\nfunction GlobalCSSExample() {\n  return <div className=\"global-style\">This uses global CSS!</div>;\n}",
        "code2": ".global-style {\n  color: red;\n  font-size: 20px;\n  padding: 20px;\n}"
    }
]