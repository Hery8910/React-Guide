[
  {
    "name": "RenderCode",
    "description": "The RenderCode component is designed to display code snippets with syntax highlighting and provide a convenient copy-to-clipboard feature. It enhances the user experience by allowing easy copying of code, making it perfect for documentation and tutorials. The component uses the SyntaxHighlighter for rendering code with highlighting, and the FaRegCopy icon from react-icons for the copy button. This icon visually indicates the copy functionality to the user, ensuring they can easily recognize and use the feature.",
    "installation": {
      "description": "There is no need to install the RenderCode component itself. However, if you want to use the same icon and component for rendering the code, you should install both react-syntax-highlighter and react-icons from the console. If you prefer to use different icons or another component for rendering the code, installation is not necessary.",
      "command": "npm install react-syntax-highlighter react-icons"
    },
    "usage": {
      "basic": {
        "component": "RenderCode.js",
        "code": "import React, { useState } from \"react\"; // Import React and useState hook\nimport { FaRegCopy } from \"react-icons/fa6\"; // Import copy icon from react-icons\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\"; // Import SyntaxHighlighter component\nimport { atelierDuneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\"; // Import syntax highlighting style\nimport styles from \"../styles/RenderCode.module.css\"; // Import CSS module styles\n\nexport function RenderCode({ code }) {\n  const [copied, setCopied] = useState(false); // State to track if code is copied\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(code) // Copy code to clipboard\n      .then(() => {\n        setCopied(true); // Set copied state to true\n        setTimeout(() => {\n          setCopied(false); // Reset copied state after 1 second\n        }, 1000);\n      })\n      .catch((err) => {\n        console.error(\"Could not copy text: \", err); // Log error if copying fails\n      });\n  };\n\n  return (\n    <div className={styles.div}>\n      <SyntaxHighlighter\n        className={styles.code}\n        language=\"javascript\"\n        style={atelierDuneDark}\n      >\n        {code}\n      </SyntaxHighlighter>\n      <button onClick={copyToClipboard} className={styles.button}>\n        {copied ? <span className=\"copy-message\">Copied</span> : <FaRegCopy />}\n      </button>\n    </div>\n  );\n}\n",
        "description": "This code demonstrates how to use the RenderCode component to display code with syntax highlighting and a copy-to-clipboard feature. The component uses the useState hook to manage the copied state, and the navigator.clipboard API to copy text to the clipboard."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "RenderCode.module.css",
      "code": ".div {\n  position: relative;\n  padding: 1rem;\n}\n.code {\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px #f6f5f73f;\n  padding: 1rem;\n  overflow: auto;\n  font-family: \"Courier New\", Courier, monospace;\n  font-size: 1rem;\n}\n.button {\n  position: absolute;\n  top: 5px;\n  right: 10px;\n  border: 0;\n  font-size: 1.2rem;\n  font-weight: 100;\n  background-color: transparent;\n  color: #f6f5f7;\n  cursor: pointer;\n}\n"
    },
    "properties": [
      {
        "name": "code",
        "description": "The code to be displayed and copied. Pass the code as a string to this prop.",
        "example": "<RenderCode code={ code } />"
      }
    ],
    "references": [
      {
        "name": "SyntaxHighlighter Documentation",
        "url": "https://github.com/react-syntax-highlighter/react-syntax-highlighter"
      },
      {
        "name": "React Icons Documentation",
        "url": "https://react-icons.github.io/react-icons/"
      }
    ],
    "example": {
      "description": "This is an example of the RenderCode component in use.",
      "url": "/public/images/RenderCode.webp"
    }
  },
  {
    "name": "Button",
    "description": "The <button> HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog. This React component allows you to create customizable buttons easily.",
    "installation": {
      "description": "There is no need to install the Button component itself. However, if you want to use the specific styles provided, you should create a CSS file and import it into your component.",
      "command": ""
    },
    "usage": {
      "basic": {
        "component": "Button.js",
        "code": "import React from 'react';\nimport './Button.css';\n\nfunction Button({ label, onClick }) {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {label}\n    </button>\n  );\n}\n\nexport default Button;",
        "description": "This code demonstrates how to use the Button component with a label and an onClick handler. The component renders a button with the provided label and calls the onClick function when the button is clicked."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Button.css",
      "code": "/* Button.css */\n.button {\n  background-color: #4CAF50;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button:hover {\n  background-color: #45a049;\n}"
    },
    "properties": [
      {
        "name": "label",
        "description": "The text to display on the button.",
        "example": "<Button label=\"Click Me\" onClick={handleClick} />"
      },
      {
        "name": "onClick",
        "description": "Function to call when the button is clicked.",
        "example": "<Button label=\"Click Me\" onClick={handleClick} />"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://react-bootstrap.github.io/components/buttons/"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Card",
    "description": "A component to display content in a card layout. Cards are surfaces that display content and actions on a single topic. They should be easy to scan for relevant and actionable information.",
    "installation": {
      "description": "There is no need to install the Card component itself. However, if you want to use the specific styles provided, you should create a CSS file and import it into your component.",
      "command": ""
    },
    "usage": {
      "basic": {
        "component": "Card.js",
        "code": "import React from 'react';\nimport styles from './Card.module.css';\n\nexport function Card({product}) {\n  const product = { //This is a product example\n    image: 'https://via.placeholder.com/300',\n    name: 'Product Name',\n    description: 'This is a short description of the product.',\n    price: '29.99'\n  };\n\n  function handleClick() {\n    // Add to cart function\n  }\n\n  return (\n    <div className={styles.product_card}>\n      <img src={product.image} alt={product.name} className={styles.product_image} />\n      <div className={styles.product_details}>\n        <h2 className={styles.product_name}>{product.name}</h2>\n        <p className={styles.product_description}>{product.description}</p>\n        <div className={styles.product_price}>${product.price}</div>\n        <button className={styles.add_to_cart_button} onClick={handleClick}>Add to Cart</button>\n      </div>\n    </div>\n  );\n};",
        "description": "This code demonstrates how to use the Card component to display a title and content in a card layout. The component renders a card with the provided title and content."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Card.css",
      "code": ".product_card {\n  padding: 1rem;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #b1b1b14c;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s;\n  max-width: 300px;\n  margin: 10vw;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n}\n\n.product_card:hover {\n  transform: scale(1.05);\n}\n\n.product_image {\n  width: 100%;\n  height: auto;\n  border-radius: 4px;\n  margin-bottom: 5px;\n}\n\n.product_details {\n  padding: 16px;\n  border-radius: 4px;\n}\n\n.product_name {\n  font-size: 1.5em;\n  margin: 0;\n  color: #ffffff;\n}\n\n.product_description {\n  color: #757575;\n  margin: 8px 0;\n}\n\n.product_price {\n  font-size: 1.2em;\n  color: #57c4db;\n  margin-bottom: 16px;\n}\n\n.add_to_cart_button {\n  background-color: #57c4db;\n  color: #ffffff;\n  border: none;\n  padding: 10px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.add_to_cart_button:hover {\n  background-color: #57c4db;\n}\n"
    },
    "properties": [
      {
        "name": "",
        "description": "",
        "example": ""
      },
      {
        "name": "product",
        "description": "The product to be displayed in the card.",
        "example": "<Card product={ } />"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://react-bootstrap.github.io/components/cards/"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "/public/images/Card_Component.webp"
    }
  },
  {
    "name": "Carousel",
    "description": "A component to create a carousel/slider for images or content. Carousels are a popular method to display multiple items in a single space.",
    "installation": {
      "description": "There is no need to install the Carousel component itself. However, if you want to use the specific styles provided, you should create a CSS file and import it into your component.",
      "command": "npm install react-carousel --save"
    },
    "usage": {
      "basic": {
        "component": "Carousel.js",
        "code": "import React from 'react';\nimport './Carousel.css';\n\nfunction Carousel({ items }) {\n  return (\n    <div className=\"carousel\">\n      {items.map((item, index) => (\n        <div key={index} className=\"carousel-item\">\n          {item}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Carousel;",
        "description": "This code demonstrates how to use the Carousel component to display a list of items in a sliding carousel layout. The component renders a carousel with the provided items."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Carousel.css",
      "code": "/* Carousel.css */\n.carousel {\n  display: flex;\n  overflow-x: scroll;\n  scroll-snap-type: x mandatory;\n}\n\n.carousel-item {\n  flex: none;\n  scroll-snap-align: start;\n  width: 100%;\n  transition: transform 0.5s ease;\n}\n"
    },
    "properties": [
      {
        "name": "items",
        "description": "An array of items to display in the carousel.",
        "example": "<Carousel items={[<img src=\"image1.jpg\" />, <img src=\"image2.jpg\" />]} />"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://react-bootstrap.github.io/components/carousel/"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Navbar",
    "description": "A custom sliding navbar component created using React without external libraries. This component provides a responsive and interactive navigation menu, perfect for modern web applications. The menu can be toggled open and closed, enhancing user experience on both desktop and mobile devices.",
    "installation": {
      "description": "There is no need to install the Navbar component itself. However, if you want to use the same approach and styles, you should create a CSS file and import it into your component. For more advanced features, consider installing libraries like react-burger-menu.",
      "command": "npm install react-burger-menu --save"
    },
    "usage": {
      "basic": {
        "component": "Navbar.js",
        "code": "import React, { useState } from 'react';\nimport './Navbar.css';\n\nfunction Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div>\n      <div className=\"burger-button\" onClick={toggleMenu}>\n        &#9776;\n      </div>\n      <nav className={`menu ${isOpen ? 'open' : ''}`}>\n        <a className=\"menu-item\" href=\"#home\">Home</a>\n        <a className=\"menu-item\" href=\"#about\">About</a>\n        <a className=\"menu-item\" href=\"#product\">Product</a>\n        <a className=\"menu-item\" href=\"#blog\">Blog</a>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;",
        "description": "This code demonstrates how to use the Navbar component to create a sliding navigation menu. The component uses the useState hook to manage the menu's open state and toggles it with a button click."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Navbar.css",
      "code": "/* Navbar.css */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n.burger-button {\n  position: fixed;\n  top: 15px;\n  left: 15px;\n  font-size: 30px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n.menu {\n  position: fixed;\n  top: 0;\n  left: -250px;\n  width: 250px;\n  height: 100%;\n  background-color: #333;\n  overflow-x: hidden;\n  transition: 0.5s;\n  padding-top: 60px;\n}\n\n.menu.open {\n  left: 0;\n}\n\n.menu-item {\n  padding: 8px 8px 8px 32px;\n  text-decoration: none;\n  font-size: 25px;\n  color: white;\n  display: block;\n  transition: 0.3s;\n}\n\n.menu-item:hover {\n  background-color: #575757;\n}"
    },
    "properties": [
      {
        "name": "isOpen",
        "description": "Controls whether the menu is open.",
        "example": "<Navbar isOpen={true} />"
      },
      {
        "name": "onStateChange",
        "description": "Function called when the state of the menu changes.",
        "example": "<Navbar isOpen={true} onStateChange={(state) => handleStateChange(state)} />"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://github.com/negomi/react-burger-menu"
      },
      {
        "name": "Live Demo",
        "url": "https://negomi.github.io/react-burger-menu/"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Pagination",
    "description": "A component to add pagination controls to your application. Pagination is essential for breaking up large sets of data into manageable pages, enhancing performance and user experience.",
    "installation": {
      "description": "There is no need to install the Pagination component itself. However, if you want to use the same approach and styles, you should create a CSS file and import it into your component. For more advanced features, consider installing libraries like react-paginate.",
      "command": "npm install react-paginate --save"
    },
    "usage": {
      "basic": {
        "component": "Pagination.js",
        "code": "import React from 'react';\nimport ReactPaginate from 'react-paginate';\nimport './Pagination.css';\n\nfunction Pagination({ pageCount, onPageChange }) {\n  return (\n    <ReactPaginate\n      previousLabel={'previous'}\n      nextLabel={'next'}\n      breakLabel={'...'}\n      breakClassName={'break-me'}\n      pageCount={pageCount}\n      marginPagesDisplayed={2}\n      pageRangeDisplayed={5}\n      onPageChange={onPageChange}\n      containerClassName={'pagination'}\n      subContainerClassName={'pages pagination'}\n      activeClassName={'active'}\n    />\n  );\n}\n\nexport default Pagination;",
        "description": "This code demonstrates how to use the Pagination component to add pagination controls to your application. The component uses the ReactPaginate library to manage pagination and page changes."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Pagination.css",
      "code": "/* Pagination.css */\n.pagination {\n  display: flex;\n  justify-content: center;\n  padding: 10px 0;\n}\n\n.pagination li {\n  display: inline;\n  margin: 0 5px;\n}\n\n.pagination li a {\n  text-decoration: none;\n  color: #007bff;\n  padding: 5px 10px;\n}\n\n.pagination li.active a {\n  font-weight: bold;\n  color: #000;\n}"
    },
    "properties": [
      {
        "name": "pageCount",
        "description": "The total number of pages.",
        "example": "<Pagination pageCount={10} onPageChange={handlePageChange} />"
      },
      {
        "name": "onPageChange",
        "description": "Function to call when the page is changed.",
        "example": "<Pagination pageCount={10} onPageChange={handlePageChange} />"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://github.com/AdeleD/react-paginate"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Placeholder",
    "description": "A component to display placeholder content while the actual content is loading. This is useful for providing a visual cue to users that content is being loaded.",
    "installation": {
      "description": "There is no need to install the Placeholder component itself. However, if you want to use the same approach and styles, you should create a CSS file and import it into your component. For more advanced features, consider installing libraries like react-placeholder.",
      "command": "npm install react-placeholder --save"
    },
    "usage": {
      "basic": {
        "component": "Placeholder.js",
        "code": "import React from 'react';\nimport ReactPlaceholder from 'react-placeholder';\nimport 'react-placeholder/lib/reactPlaceholder.css';\n\nfunction Placeholder({ ready, children }) {\n  return (\n    <ReactPlaceholder type=\"text\" rows={7} ready={ready}>\n      {children}\n    </ReactPlaceholder>\n  );\n}\n\nexport default Placeholder;",
        "description": "This code demonstrates how to use the Placeholder component to display placeholder content while the actual content is loading. The component uses the ReactPlaceholder library to manage placeholder rendering."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Placeholder.css",
      "code": "/* Placeholder.css */\n.react-placeholder {\n  background-color: #eee;\n  border-radius: 4px;\n  margin-bottom: 10px;\n}"
    },
    "properties": [
      {
        "name": "ready",
        "description": "Boolean to indicate if the actual content is ready to be displayed.",
        "example": "<Placeholder ready={false}><YourComponent /></Placeholder>"
      },
      {
        "name": "children",
        "description": "The actual content to display when ready.",
        "example": "<Placeholder ready={false}><YourComponent /></Placeholder>"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://github.com/buildo/react-placeholder"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Popover",
    "description": "A component to display popovers or tooltips on hover or click. This is useful for providing additional information or context to users without cluttering the main interface.",
    "installation": {
      "description": "There is no need to install the Popover component itself. However, if you want to use the same approach and styles, you should install react-bootstrap and import the necessary components. For more advanced features, consider installing libraries like react-bootstrap.",
      "command": "npm install react-bootstrap --save"
    },
    "usage": {
      "basic": {
        "component": "Popover.js",
        "code": "import React from 'react';\nimport { Popover, OverlayTrigger, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction PopoverComponent() {\n  const popover = (\n    <Popover id=\"popover-basic\">\n      <Popover.Header as=\"h3\">Popover Title</Popover.Header>\n      <Popover.Body>\n        And here's some <strong>amazing</strong> content. It's very engaging. right?\n      </Popover.Body>\n    </Popover>\n  );\n\n  return (\n    <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n      <Button variant=\"success\">Click me to see</Button>\n    </OverlayTrigger>\n  );\n}\n\nexport default PopoverComponent;",
        "description": "This code demonstrates how to use the Popover component to display a popover on click. The component uses the OverlayTrigger and Popover components from react-bootstrap to manage the popover display."
      }
    },
    "styles": {
      "description": "The component uses Bootstrap for styling. Make sure to include Bootstrap CSS in your project to apply these styles.",
      "file": "",
      "code": ""
    },
    "properties": [
      {
        "name": "placement",
        "description": "The position of the popover relative to the target.",
        "example": "<OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>"
      },
      {
        "name": "trigger",
        "description": "The event that triggers the popover.",
        "example": "<OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://react-bootstrap.github.io/components/overlays/#popovers"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "ScrollSpy",
    "description": "A component to automatically update navigation or perform actions based on scroll position. This is useful for creating dynamic and interactive navigation elements that respond to user scrolling.",
    "installation": {
      "description": "There is no need to install the ScrollSpy component itself. However, if you want to use the same approach and styles, you should install react-scrollspy and import the necessary components.",
      "command": "npm install react-scrollspy --save"
    },
    "usage": {
      "basic": {
        "component": "ScrollSpy.js",
        "code": "import React from 'react';\nimport Scrollspy from 'react-scrollspy';\n\nfunction ScrollSpyComponent() {\n  return (\n    <div>\n      <Scrollspy items={['section-1', 'section-2', 'section-3']} currentClassName=\"is-current\">\n        <li><a href=\"#section-1\">Section 1</a></li>\n        <li><a href=\"#section-2\">Section 2</a></li>\n        <li><a href=\"#section-3\">Section 3</a></li>\n      </Scrollspy>\n      <div id=\"section-1\">Section 1 Content</div>\n      <div id=\"section-2\">Section 2 Content</div>\n      <div id=\"section-3\">Section 3 Content</div>\n    </div>\n  );\n}\n\nexport default ScrollSpyComponent;",
        "description": "This code demonstrates how to use the ScrollSpy component to update navigation based on scroll position. The component uses the Scrollspy library to track the sections and update the navigation accordingly."
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "ScrollSpy.css",
      "code": ".is-current a {\n  color: red;\n  font-weight: bold;\n}"
    },
    "properties": [
      {
        "name": "items",
        "description": "An array of section IDs to spy on.",
        "example": "<Scrollspy items={['section-1', 'section-2', 'section-3']} currentClassName=\"is-current\">"
      },
      {
        "name": "currentClassName",
        "description": "Class name to apply to the current item.",
        "example": "<Scrollspy items={['section-1', 'section-2', 'section-3']} currentClassName=\"is-current\">"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://github.com/makotot/react-scrollspy"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Spinner",
    "description": "A component to display a loading spinner. This is useful for indicating to users that content is being loaded, improving user experience by providing visual feedback.",
    "installation": {
      "description": "There is no need to install the Spinner component itself. However, if you want to use the same approach and styles, you should install react-loader-spinner and import the necessary components.",
      "command": "npm install react-loader-spinner --save"
    },
    "usage": {
      "basic": {
        "component": "Spinner.js",
        "code": "import React from 'react';\nimport { Circles } from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nfunction Spinner() {\n  return (\n    <Circles color=\"#00BFFF\" height={80} width={80} />\n  );\n}\n\nexport default Spinner;",
        "description": "This code demonstrates how to use the Spinner component to display a loading spinner. The component uses the Circles component from react-loader-spinner to render the spinner."
      }
    },
    "styles": {
      "description": "The component uses default styles from the react-loader-spinner library. No additional CSS is required.",
      "file": "",
      "code": ""
    },
    "properties": [
      {
        "name": "color",
        "description": "The color of the spinner.",
        "example": "<Circles color=\"#00BFFF\" height={80} width={80} />"
      },
      {
        "name": "height",
        "description": "The height of the spinner.",
        "example": "<Circles color=\"#00BFFF\" height={80} width={80} />"
      },
      {
        "name": "width",
        "description": "The width of the spinner.",
        "example": "<Circles color=\"#00BFFF\" height={80} width={80} />"
      }
    ],
    "references": [
      {
        "name": "Official Documentation",
        "url": "https://www.npmjs.com/package/react-loader-spinner"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "https://via.placeholder.com/300"
    }
  },
  {
    "name": "Footer",
    "description": "The Footer component is designed to display a footer section with a title and an unordered list containing three links: About Me, Contact, and Feedback. It uses CSS modules for styling, ensuring a clean and modern design similar to other components.",
    "installation": {
      "description": "No additional dependencies are required for the Footer component. Ensure you have CSS module support configured in your React project.",
      "command": ""
    },
    "usage": {
      "basic": {
        "component": "Footer.js",
        "code": "import React from 'react';\nimport styles from './Footer.module.css';\n\nexport function Footer() {\n  return (\n    <footer className={styles.footer}>\n      <h2 className={styles.title}>Made with ❤️ from Berlin</h2>\n      <ul className={styles.linkList}>\n        <li className={styles.listItem}><a href=\"#about-me\" className={styles.link}>About Me</a></li>\n        <li className={styles.listItem}><a href=\"#contact\" className={styles.link}>Contact</a></li>\n        <li className={styles.listItem}><a href=\"#feedback\" className={styles.link}>Feedback</a></li>\n      </ul>\n    </footer>\n  );\n}\n\nexport default Footer;"
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "Footer.module.css",
      "code": ".footer {\n  padding: 1rem;\n  background-color: #b1b1b14c;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  margin: 10vw auto;\n  max-width: 300px;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n}\n\n.title {\n  font-size: 1.5em;\n  color: #ffffff;\n  margin-bottom: 1rem;\n}\n\n.linkList {\n  list-style-type: none;\n  padding: 0;\n}\n\n.listItem {\n  margin: 0.5rem 0;\n}\n\n.link {\n  color: #57c4db;\n  text-decoration: none;\n  transition: color 0.3s;\n}\n\n.link:hover {\n  color: #ffffff;\n}\n"
    },
    "properties": [
      {
        "name": "code",
        "description": "The code to be displayed and copied.",
        "example": "<Footer />"
      }
    ],
    "references": [
      {
        "name": "CSS Modules Documentation",
        "url": "https://github.com/css-modules/css-modules"
      }
    ],
    "example": {
      "description": "This is an example of the Footer component in use.",
      "url": "/public/images/Footer.webp"
    }
  }
  ,
  {
    "name": "StyledTable",
    "description": "The StyledTable component is designed to display a table with 5 rows and 5 columns, styled similarly to the previously created Card component. It uses CSS modules for styling, ensuring a clean and modern design.",
    "installation": {
      "description": "No additional dependencies are required for the StyledTable component. Ensure you have CSS module support configured in your React project.",
      "command": "npm install"
    },
    "usage": {
      "basic": {
        "component": "StyledTable.js",
        "code": "import React from 'react';\nimport styles from './StyledTable.module.css';\n\nexport function StyledTable() {\n  const data = [\n    ['Header 1', 'Header 2', 'Header 3', 'Header 4', 'Header 5'],\n    ['Row 1 Col 1', 'Row 1 Col 2', 'Row 1 Col 3', 'Row 1 Col 4', 'Row 1 Col 5'],\n    ['Row 2 Col 1', 'Row 2 Col 2', 'Row 2 Col 3', 'Row 2 Col 4', 'Row 2 Col 5'],\n    ['Row 3 Col 1', 'Row 3 Col 2', 'Row 3 Col 3', 'Row 3 Col 4', 'Row 3 Col 5'],\n    ['Row 4 Col 1', 'Row 4 Col 2', 'Row 4 Col 3', 'Row 4 Col 4', 'Row 4 Col 5'],\n  ];\n\n  return (\n    <div className={styles.table_container}>\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            {data[0].map((header, index) => (\n              <th key={index} className={styles.table_header}>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.slice(1).map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, cellIndex) => (\n                <td key={cellIndex} className={styles.table_cell}>{cell}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default StyledTable;"
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "StyledTable.module.css",
      "code": ".table_container {\n  padding: 1rem;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #b1b1b14c;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s;\n  max-width: 600px;\n  margin: 10vw auto;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n}\n\n.table_container:hover {\n  transform: scale(1.05);\n}\n\n.table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.table_header {\n  background-color: #57c4db;\n  color: #ffffff;\n  padding: 8px;\n  text-align: left;\n  font-size: 1.2em;\n}\n\n.table_cell {\n  padding: 8px;\n  border-bottom: 1px solid #ddd;\n  color: #757575;\n}\n\n.table_cell:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n.table_cell:nth-child(odd) {\n  background-color: #ffffff;\n}"
    },
    "properties": [
      {
        "name": "code",
        "description": "The code to be displayed and copied. Pass the code as a string to this prop.",
        "example": "<StyledTable code={`const a = 1;`} />"
      }
    ],
    "references": [
      {
        "name": "SyntaxHighlighter Documentation",
        "url": "https://github.com/react-syntax-highlighter/react-syntax-highlighter"
      },
      {
        "name": "React Icons Documentation",
        "url": "https://react-icons.github.io/react-icons/"
      }
    ],
    "example": {
      "description": "This is an example of the StyledTable component in use.",
      "url": "/public/images/Table.webp"
    }
  }
  ,
  {
    "name": "Form",
    "description": "The Form component is designed to include an input for the name, an input for the email, and a textarea for comments. It uses CSS modules for styling, ensuring a clean and modern design similar to other components.",
    "installation": {
      "description": "No additional dependencies are required for the HooksPage component. Ensure you have CSS module support configured in your React project.",
      "command": ""
    },
    "usage": {
      "basic": {
        "component": "HooksPage.js",
        "code": "import React, { useState } from 'react';\nimport styles from './Form.module.css';\n\nexport function Form() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Handle form submission\n    console.log({ name, email, comment });\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <div className={styles.formGroup}>\n        <label htmlFor=\"name\" className={styles.label}>Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          className={styles.input}\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n      </div>\n      <div className={styles.formGroup}>\n        <label htmlFor=\"email\" className={styles.label}>Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          className={styles.input}\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n      <div className={styles.formGroup}>\n        <label htmlFor=\"comment\" className={styles.label}>Comment</label>\n        <textarea\n          id=\"comment\"\n          className={styles.textarea}\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n          required\n        ></textarea>\n      </div>\n      <button type=\"submit\" className={styles.button}>Submit</button>\n    </form>\n  );\n}\n"
      }
    },
    "styles": {
      "description": "The component uses CSS modules for styling. Create a .module.css file and import it into your component to apply these styles.",
      "file": "HooksPage.module.css",
      "code": ".form {\n  padding: 1rem;\n  border-radius: 8px;\n  background-color: #b1b1b14c;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n  margin: 10vw auto;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n}\n\n.formGroup {\n  margin-bottom: 1rem;\n}\n\n.label {\n  display: block;\n  padding-bottom: .4rem;\n  color: #ffffff;\n  font-size: 1.2em;\n  background-color: #b1b1b14c;\n}\n\n.input, .textarea {\n  width: 100%;\n  padding: 0.5rem;\n  border-radius: 4px;\n  font-size: 1em;\n  box-sizing: border-box;\n}\n\n.textarea {\n  resize: vertical;\n  height: 100px;\n}\n\n.button {\n  background-color: #57c4db;\n  color: #ffffff;\n  border: none;\n  padding: 10px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.button:hover {\n  background-color: #45a3ba;\n}\n"
    },
    "properties": [
      {
        "name": "code",
        "description": "The code to be displayed and copied. Pass the code as a string to this prop.",
        "example": "<Form />"
      }
    ],
    "references": [
      {
        "name": "CSS Modules Documentation",
        "url": "https://github.com/css-modules/css-modules"
      }
    ],
    "example": {
      "description": "This is an example of the HooksPage component in use.",
      "url": "/public/images/Form.webp"
    }
  }
  
]